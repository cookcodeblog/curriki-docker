pipeline {
  agent {
    label "master"
  }

  environment {
      // GLobal Vars
      NAME = "curriki-admin"
      ARGOCD_CONFIG_REPO = "github.com/ActiveLearningStudio/rh-innovation-lab-open-shift.git"
      ARGOCD_CONFIG_REPO_PATH = "applications/deployment/values.yaml"
      ARGOCD_CONFIG_REPO_BRANCH = "main"

      // TODO wire PHP version into pipeline
      VERSION = "0.0.1"

      // Job name contains the branch eg ds-app-feature%2Fjenkins-123
      JOB_NAME = "${JOB_NAME}".replace("%2F", "-").replace("/", "-")

      GIT_SSL_NO_VERIFY = true

      // Credentials bound in OpenShift
      GIT_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-git-auth")
      NEXUS_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-nexus-password")
      ARGOCD_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-argocd-token")

      // Nexus Artifact repo
      NEXUS_REPO_NAME="labs-static"
      NEXUS_REPO_HELM = "helm-charts"
  }

  options {
      buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '1'))
      timeout(time: 15, unit: 'MINUTES')
      ansiColor('xterm')
      timestamps()
  }

  stages {
    stage('Prepare Environment') {
       failFast true
       parallel {
           stage("Release Build") {
               options {
                   skipDefaultCheckout(true)
               }
               agent {
                   node {
                       label "master"
                   }
               }
               when {
                   expression { GIT_BRANCH.startsWith("main") }
               }
               steps {
                   script {
                       env.TARGET_NAMESPACE = "labs-dev"
                       env.TESTING_NAMESPACE = "labs-test"
                       env.STAGING_NAMESPACE = "labs-staging"
                       env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                       env.APP_NAME = "${NAME}".replace("/", "-").toLowerCase()
                       env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                   }
               }
           }
           stage("Sandbox Build") {
               options {
                   skipDefaultCheckout(true)
               }
               agent {
                   node {
                       label "master"
                   }
               }
               when {
                   expression { GIT_BRANCH.startsWith("dev") || GIT_BRANCH.startsWith("feature") || GIT_BRANCH.startsWith("fix") }
               }
               steps {
                   script {
                       env.TARGET_NAMESPACE = "labs-dev"
                       env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                       env.APP_NAME = "${GIT_BRANCH}-${NAME}".replace("/", "-").toLowerCase()
                       env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                       env.NODE_ENV = "test"
                   }
               }
           }
           stage("Pull Request Build") {
               options {
                   skipDefaultCheckout(true)
               }
               agent {
                   node {
                       label "master"
                   }
               }
               when {
                   expression { GIT_BRANCH.startsWith("PR-") }
               }
               steps {
                   script {
                       env.TARGET_NAMESPACE = "labs-dev"
                       env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                       env.APP_NAME = "${GIT_BRANCH}-${NAME}".replace("/", "-").toLowerCase()
                       env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                   }
               }
           }
       }
    }

    stage("Bake (OpenShift Build)") {
        failFast true
        parallel {
            stage("Bake image") {
                agent {
                    node {
                        label "jenkins-agent-argocd"
                    }
                }
                when {
                    expression { GIT_BRANCH.startsWith("main") }
                }
                steps {
                    // sh 'printenv'
                    sh  '''
                        oc get bc ${APP_NAME} || rc=$?
                        if [ "$rc" = "1" ]; then
                            echo " 🏗 no build - creating one 🏗"
                            oc new-build --name=${APP_NAME} -l app=${APP_NAME} --strategy=docker ${TSGUI_GIT_REPO}  --dry-run -o yaml > /tmp/bc.yaml
                            yq d -i /tmp/bc.yaml items[1].spec.triggers
                            oc apply -f /tmp/bc.yaml
                        fi

                        echo " 🏗 build found - starting it  🏗"
                        oc start-build ${APP_NAME} --follow
                    '''
                }
            }
        }
     }
  }
}
