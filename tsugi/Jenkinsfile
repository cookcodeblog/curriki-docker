pipeline {
  agent {
    label "master"
  }

  environment {
      // GLobal Vars
      NAME = "curriki-tsugi"
      APP_NAME_FPM = "curriki-tsugi-fpm"
      ARGOCD_CONFIG_REPO = "github.com/ActiveLearningStudio/rh-innovation-lab-open-shift.git"
      ARGOCD_CONFIG_REPO_PATH = "applications/deployment/values.yaml"
      ARGOCD_CONFIG_REPO_BRANCH = "main"

      // TODO wire PHP version into pipeline
      VERSION = "1.0.0"

      // Job name contains the branch eg ds-app-feature%2Fjenkins-123
      JOB_NAME = "${JOB_NAME}".replace("%2F", "-").replace("/", "-")

      GIT_SSL_NO_VERIFY = true

      // Credentials bound in OpenShift
      GIT_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-git-auth")
      NEXUS_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-nexus-password")
      ARGOCD_CREDS = credentials("${OPENSHIFT_BUILD_NAMESPACE}-argocd-token")

      // Nexus Artifact repo
      NEXUS_REPO_NAME="labs-static"
      NEXUS_REPO_HELM = "helm-charts"
  }

  options {
      buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '1'))
      timeout(time: 15, unit: 'MINUTES')
      ansiColor('xterm')
      timestamps()
  }

  stages {
    stage('Prepare Environment') {
        failFast true
        parallel {
            stage("Release Build") {
                options {
                    skipDefaultCheckout(true)
                }
                agent {
                    node {
                        label "master"
                    }
                }
                when {
                    expression { GIT_BRANCH.startsWith("main") }
                }
                steps {
                    script {
                        env.TARGET_NAMESPACE = "labs-dev"
                        env.TESTING_NAMESPACE = "labs-test"
                        env.STAGING_NAMESPACE = "labs-staging"
                        env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                        env.APP_NAME = "${NAME}".replace("/", "-").toLowerCase()
                        env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                    }
                }
            }
            stage("Sandbox Build") {
                options {
                    skipDefaultCheckout(true)
                }
                agent {
                    node {
                        label "master"
                    }
                }
                when {
                    expression { GIT_BRANCH.startsWith("dev") || GIT_BRANCH.startsWith("feature") || GIT_BRANCH.startsWith("fix") }
                }
                steps {
                    script {
                        env.TARGET_NAMESPACE = "labs-dev"
                        env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                        env.APP_NAME = "${GIT_BRANCH}-${NAME}".replace("/", "-").toLowerCase()
                        env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                        env.NODE_ENV = "test"
                    }
                }
            }
            stage("Pull Request Build") {
                options {
                    skipDefaultCheckout(true)
                }
                agent {
                    node {
                        label "master"
                    }
                }
                when {
                    expression { GIT_BRANCH.startsWith("PR-") }
                }
                steps {
                    script {
                        env.TARGET_NAMESPACE = "labs-dev"
                        env.IMAGE_REPOSITORY = 'image-registry.openshift-image-registry.svc:5000'
                        env.APP_NAME = "${GIT_BRANCH}-${NAME}".replace("/", "-").toLowerCase()
                        env.APP_NAME_UC = "${APP_NAME}".replace("-", "_").toLowerCase()
                    }
                }
            }
        }
    }

    stage("Bake (OpenShift Build)") {
                failFast true
                parallel {
                    stage("Bake base api image") {
                        agent {
                            node {
                                label "jenkins-agent-argocd"
                            }
                        }
                        when {
                            expression { GIT_BRANCH.startsWith("main") }
                        }
                        steps {
                            sh 'printenv'
                            echo 'TODO: build docker image for tsgui-web'
                        }
                    }

                }
            }

    stage("Helm Package App (master)") {
        agent {
            node {
                label "jenkins-agent-helm"
            }
        }
        steps {
            sh 'printenv'
            sh '''
                git clone https://${ARGOCD_CONFIG_REPO} config-repo
                cd config-repo/
                git checkout ${ARGOCD_CONFIG_REPO_BRANCH}

                # lint chart
                echo '### Running chart linter ###'
                cd ${APP_NAME}/web
                helm lint chart

                # update values for deployment
                yq w -i chart/Chart.yaml 'appVersion' ${VERSION}
                yq w -i chart/Chart.yaml 'version' ${VERSION}
                yq w -i chart/Chart.yaml 'name' ${APP_NAME}
                yq w -i chart/values.yaml 'image_repository' ${IMAGE_REPOSITORY}
                yq w -i chart/values.yaml 'image_name' ${APP_NAME}
                yq w -i chart/values.yaml 'image_namespace' ${TARGET_NAMESPACE}
                yq w -i chart/values.yaml 'image_version' ${VERSION}

                # package and release helm chart
                echo '### Package and release helm chart ###'
                helm package chart/ --app-version ${VERSION} --version ${VERSION}
                curl -v -f -u ${NEXUS_CREDS} http://${SONATYPE_NEXUS_SERVICE_SERVICE_HOST}:${SONATYPE_NEXUS_SERVICE_SERVICE_PORT}/repository/${NEXUS_REPO_HELM}/ --upload-file ${APP_NAME}-${VERSION}.tgz
            '''
        }
    }
  }
}